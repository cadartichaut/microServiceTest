/*jshint -W069 */
'use strict';

import tv4 from 'tv4';
import nanoajax from 'nanoajax';

// TypedError class which other typed errors subclass from.
// https://gist.github.com/daliwali/09ca19032ab192524dc6
class TypedError extends Error {
    constructor(message) {
        if ('object' === typeof message) {
            if ('length' in message) {
                message = message.map(JSON.stringify).join(' ');
            } else {
                message = JSON.stringify(message);
            }
        }

        super();
        Object.defineProperty(this, 'message', {
            value: message
        });
        Object.defineProperty(this, 'name', {
            value: this.constructor.name
        });
    }

    get name() {
        return this.constructor.name;
    }
}

export class AjaxError extends TypedError {}

export class APIError extends TypedError {}

export function validate(body, schema, details) {
    if (!schema) {
        throw new AjaxError([
            'There is no schema available for the request',
            details.request.url + ':',
            details.request.method + ':',
            details.code ? 'responses: ' + details.code : 'parameters: in: body'
        ]);
    }

    var checkRecursive = false;
    var banUnknownProperties = true;
    var isValid = tv4.validate(body, schema, checkRecursive, banUnknownProperties);

    return isValid || tv4.error;
}

export function ajax(request) {
    var requestMethod = request.method.toLowerCase();
    var schemas = request.schema[requestMethod];

    return new Promise(function ajaxPromise(resolve, reject) {
        function validateRequest(request) {
            // JSON Schema request validation
            if (request.body) {
                var isValidRequest = validate(request.body, schemas.request, {
                    request: request
                });

                if (isValidRequest !== true) {
                    reject(new APIError(isValidRequest));
                }
            }

            try {
                request.body = JSON.stringify(request.body);
            } catch (e) {}

            return request;
        }

        function validateResponse(code, response, xhr) {
            try {
                response = JSON.parse(response);
            } catch (e) {
                reject(new APIError([
                    'Request response is not a valid JSON',
                    request.url + ':',
                    request.method + ':',
                    code ? 'responses: ' + code : 'parameters: in: body'
                ]));
            }

            // JSON Schema response validation
            var responseSchema = schemas.responses[code] || schemas.responses['default'];
            var isValidResponse = validate(response, responseSchema, {
                request: request,
                response: response,
                code: code
            });

            if (isValidResponse !== true) {
                reject(new APIError(isValidResponse));
            } else if (code >= 200 && code <= 299) {
                resolve(response);
            } else {
                reject(new AjaxError([
                    code,
                    request.url,
                    response
                ]));
            }
        }

        nanoajax.ajax(validateRequest(request), validateResponse);
    });
}

/**
 * A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification
 * @class API
 * @param {(string|object)} [domainOrOptions] - The project domain or options object. If object, see the object's optional properties.
 * @param {string} [domainOrOptions.domain] - The project domain
 * @param {object} [domainOrOptions.token] - auth token - object with value property and optional headerOrQueryName and isQuery properties
 */
var domain = '/api';
var schemas = {
    "/pets": {
        "get": {
            "responses": {
                "200": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "name": {
                                "type": "string"
                            },
                            "tag": {
                                "type": "string"
                            }
                        },
                        "required": ["id", "name"]
                    }
                },
                "default": {
                    "required": ["code", "message"],
                    "properties": {
                        "code": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "message": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "post": {
            "request": {
                "allOf": [{
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "name": {
                            "type": "string"
                        },
                        "tag": {
                            "type": "string"
                        }
                    },
                    "required": ["id", "name"]
                }]
            },
            "responses": {
                "200": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "name": {
                            "type": "string"
                        },
                        "tag": {
                            "type": "string"
                        }
                    },
                    "required": ["id", "name"]
                },
                "default": {
                    "required": ["code", "message"],
                    "properties": {
                        "code": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "message": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "/pets/{id}": {
        "get": {
            "responses": {
                "200": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "name": {
                            "type": "string"
                        },
                        "tag": {
                            "type": "string"
                        }
                    },
                    "required": ["id", "name"]
                },
                "default": {
                    "required": ["code", "message"],
                    "properties": {
                        "code": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "message": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "delete": {
            "responses": {
                "204": {},
                "default": {
                    "required": ["code", "message"],
                    "properties": {
                        "code": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "message": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    }
};
var API = {};

/**
 * Returns all pets from the system that the user has access to
Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.

Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.

 * @method
 * @name API#findPets
 * @param {array} tags - tags to filter by
 * @param {integer} limit - maximum number of results to return
 * 
 */
API.findPets = function(parameters) {
    parameters = parameters || {};

    return new Promise(function(resolve, reject) {
        var path = '/pets';
        var schema = schemas[path];

        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};

        if (parameters.tags !== undefined) {
            queryParameters.tags = parameters.tags;
        }

        if (parameters.limit !== undefined) {
            queryParameters.limit = parameters.limit;
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters)
                .forEach(function(parameterName) {
                    var parameter = parameters.$queryParameters[parameterName];
                    queryParameters[parameterName] = parameter;
                });
        }

        var req = {
            method: 'GET',
            url: domain + path,
            qs: queryParameters,
            headers: headers,
            body: body,
            schema: schema
        };

        if (Object.keys(form).length > 0) {
            req.form = form;
        }

        if (typeof req.body === 'object') {
            req.headers['Content-Type'] = 'application/json;charset=utf-8';
            req.json = true;
        }

        ajax(req).then(resolve).catch(reject);
    });
};
/**
 * Creates a new pet in the store.  Duplicates are allowed
 * @method
 * @name API#addPet
 * @param {} pet - Pet to add to the store
 * 
 */
API.addPet = function(parameters) {
    parameters = parameters || {};

    return new Promise(function(resolve, reject) {
        var path = '/pets';
        var schema = schemas[path];

        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};

        if (parameters.pet !== undefined) {
            body = parameters.pet;
        }

        if (parameters.pet === undefined) {
            return reject(new APIError('Missing required  parameter: pet (Pet to add to the store).'));
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters)
                .forEach(function(parameterName) {
                    var parameter = parameters.$queryParameters[parameterName];
                    queryParameters[parameterName] = parameter;
                });
        }

        var req = {
            method: 'POST',
            url: domain + path,
            qs: queryParameters,
            headers: headers,
            body: body,
            schema: schema
        };

        if (Object.keys(form).length > 0) {
            req.form = form;
        }

        if (typeof req.body === 'object') {
            req.headers['Content-Type'] = 'application/json;charset=utf-8';
            req.json = true;
        }

        ajax(req).then(resolve).catch(reject);
    });
};
/**
 * Returns a user based on a single ID, if the user does not have access to the pet
 * @method
 * @name API#findPetById
 * @param {integer} id - ID of pet to fetch
 * 
 */
API.findPetById = function(parameters) {
    parameters = parameters || {};

    return new Promise(function(resolve, reject) {
        var path = '/pets/{id}';
        var schema = schemas[path];

        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};

        path = path.replace('{id}', parameters.id);

        if (parameters.id === undefined) {
            return reject(new APIError('Missing required integer parameter: id (ID of pet to fetch).'));
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters)
                .forEach(function(parameterName) {
                    var parameter = parameters.$queryParameters[parameterName];
                    queryParameters[parameterName] = parameter;
                });
        }

        var req = {
            method: 'GET',
            url: domain + path,
            qs: queryParameters,
            headers: headers,
            body: body,
            schema: schema
        };

        if (Object.keys(form).length > 0) {
            req.form = form;
        }

        if (typeof req.body === 'object') {
            req.headers['Content-Type'] = 'application/json;charset=utf-8';
            req.json = true;
        }

        ajax(req).then(resolve).catch(reject);
    });
};
/**
 * deletes a single pet based on the ID supplied
 * @method
 * @name API#deletePet
 * @param {integer} id - ID of pet to delete
 * 
 */
API.deletePet = function(parameters) {
    parameters = parameters || {};

    return new Promise(function(resolve, reject) {
        var path = '/pets/{id}';
        var schema = schemas[path];

        var body;
        var queryParameters = {};
        var headers = {};
        var form = {};

        path = path.replace('{id}', parameters.id);

        if (parameters.id === undefined) {
            return reject(new APIError('Missing required integer parameter: id (ID of pet to delete).'));
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters)
                .forEach(function(parameterName) {
                    var parameter = parameters.$queryParameters[parameterName];
                    queryParameters[parameterName] = parameter;
                });
        }

        var req = {
            method: 'DELETE',
            url: domain + path,
            qs: queryParameters,
            headers: headers,
            body: body,
            schema: schema
        };

        if (Object.keys(form).length > 0) {
            req.form = form;
        }

        if (typeof req.body === 'object') {
            req.headers['Content-Type'] = 'application/json;charset=utf-8';
            req.json = true;
        }

        ajax(req).then(resolve).catch(reject);
    });
};

// Expose global object for playtime at console.
window.API = API;

export default API;